/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Security AI Assistant Workflow Generation API
 *   version: 1
 */

import { z } from '@kbn/zod';

export type CreateActionRequestBody = z.infer<typeof CreateActionRequestBody>;
export const CreateActionRequestBody = z.object({
  /**
   * The name of the action.
   */
  name: z.string(),
  /**
   * The URL of the action.
   */
  url: z.string(),
  /**
   * The API key for the action.
   */
  apiKey: z.string(),
  /**
   * Optional OpenAPI specification for the action.
   */
  openApiSpec: z.string().optional(),
});
export type CreateActionRequestBodyInput = z.input<typeof CreateActionRequestBody>;

export type CreateActionResponse = z.infer<typeof CreateActionResponse>;
export const CreateActionResponse = z.object({
  success: z.boolean().optional(),
  actionId: z.string().optional(),
  message: z.string().optional(),
});

export type ExecuteWorkflowRequestBody = z.infer<typeof ExecuteWorkflowRequestBody>;
export const ExecuteWorkflowRequestBody = z.object({
  /**
   * The ID of the workflow to execute.
   */
  workflowId: z.string(),
  /**
   * List of action IDs to execute within the workflow.
   */
  actionIds: z.array(z.string()),
});
export type ExecuteWorkflowRequestBodyInput = z.input<typeof ExecuteWorkflowRequestBody>;

export type ExecuteWorkflowResponse = z.infer<typeof ExecuteWorkflowResponse>;
export const ExecuteWorkflowResponse = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

export type GenerateWorkflowRequestBody = z.infer<typeof GenerateWorkflowRequestBody>;
export const GenerateWorkflowRequestBody = z.object({
  /**
   * The prompt to generate the workflow.
   */
  prompt: z.string(),
  /**
   * List of action IDs to include in the generated workflow.
   */
  actionIds: z.array(z.string()).optional().default([]),
});
export type GenerateWorkflowRequestBodyInput = z.input<typeof GenerateWorkflowRequestBody>;

export type GenerateWorkflowResponse = z.infer<typeof GenerateWorkflowResponse>;
export const GenerateWorkflowResponse = z.object({
  success: z.boolean().optional(),
  workflowId: z.string().optional(),
  message: z.string().optional(),
});

export type GetActionsResponse = z.infer<typeof GetActionsResponse>;
export const GetActionsResponse = z.array(
  z.object({
    actionId: z.string().optional(),
    name: z.string().optional(),
    url: z.string().optional(),
    apiKey: z.string().optional(),
    openApiSpec: z.string().nullable().optional(),
  })
);
